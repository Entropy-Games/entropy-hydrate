// Generated by dts-bundle v0.7.3

declare module 'hydrate-web' {
    global {
        interface Window {
            reservoir: Reservoir;
            children: HTMLCollection;
        }
    }
    type El = (Element) & {
        reloadComponent?: Function;
    };
    type ElRaw = Element | HTMLElement | Document | Window;
    interface IPerfData {
        renders: string[];
    }
    export class Reservoir {
        localStorageKey: string;
        static readonly executeError: unique symbol;
        errors: [string, Error][];
        readonly perf: IPerfData;
        loadFromLocalStorage(hydrate?: boolean): void;
        waitForLoaded(cb: Function): undefined;
        saveToLocalStorage(): void;
        setFromObj(obj: Record<string, unknown>, persist?: boolean): void;
        setDefaults(obj: Record<string, unknown>, persist?: boolean): void;
        set(key: string | Record<string, unknown>, item: unknown, persist?: boolean): void;
        get(key: string): any;
        execute(key: string, $el: El): any;
        has(key: string): boolean;
        hydrate($el?: ElRaw): void;
        init(rootPath: string, localStorageKey?: string): Promise<void>;
        Component<args extends any[], returns>(name: string, cb: ($el: El, id: number, ...args: args) => returns): ($el: El | string, ...args: args) => Promise<returns>;
    }
    export {};
}


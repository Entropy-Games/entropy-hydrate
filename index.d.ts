// Generated by dts-bundle v0.7.3

declare module 'hydrate-web' {
    import { get, set, setDefaults } from "hydrate-web/src/hydrate";
    import { Component } from "hydrate-web/src/components";
    export interface IInitConfig {
        rootPath?: string;
        localStorageKey?: string;
    }
    function init({ rootPath, localStorageKey }?: IInitConfig): Promise<void>;
    const reservoir: {
        Component: typeof Component;
        init: typeof init;
        setDefaults: typeof setDefaults;
        set: typeof set;
        get: typeof get;
    };
    export { Component, init, setDefaults, set, get, reservoir };
    export default reservoir;
}

declare module 'hydrate-web/src/hydrate' {
    import { El, ElRaw } from "hydrate-web/src/types";
    export function loadFromLocalStorage(shouldHydrate?: boolean): void;
    export function waitForLoaded(cb: Function): undefined;
    export function saveToLocalStorage(): void;
    export function setFromObj(obj: Record<string, unknown>, persist?: boolean): void;
    export function setDefaults(obj: Record<string, unknown>, persist?: boolean): void;
    export function set(key: string | Record<string, unknown>, item?: unknown, persist?: boolean): void;
    export function get(key: string): any;
    export function execute(key: string, $el: El): any;
    export function has(key: string): boolean;
    export function hydrate($el?: ElRaw): void;
}

declare module 'hydrate-web/src/components' {
    import { IProps } from "hydrate-web/src/types";
    export function Component<Props extends IProps>(name: string, cb: (props: Readonly<Props>) => string): (props: Props) => Promise<string>;
}

declare module 'hydrate-web/src/types' {
    global {
        interface Window {
            reservoir: Reservoir;
            children: HTMLCollection;
        }
        interface Reservoir {
            [key: string]: any;
        }
    }
    export type El = (Element) & {
        reloadComponent?: Function;
    };
    export type ElRaw = Element | HTMLElement | Document | Window;
    export interface IPerfData {
        renders: string[];
    }
    export interface IProps {
        id: number;
        $el: El;
        [key: string]: any;
    }
}


// Generated by dts-bundle v0.7.3

declare module 'hydrate-web' {
    export type El = (Element) & {
        reloadComponent?: Function;
    };
    export type ElRaw = Element | HTMLElement | Document | Window;
    interface IPerfData {
        renders: string[];
    }
    export function sleep(ms: number): Promise<void>;
    export function escapeHTML(unsafe: any): string;
    export function preloadSVGs(...uris: string[]): void;
    export function loadSVG($el: El): Promise<void>;
    export function getSVGFromURI(uri: string): Promise<string>;
    class Reservoir {
        localStorageKey: string;
        static executeError: symbol;
        errors: [string, Error][];
        perf: IPerfData;
        loadFromLocalStorage(hydrate?: boolean): void;
        waitForLoaded(cb: Function): undefined;
        saveToLocalStorage(): void;
        setFromObj(obj: Record<string, unknown>, persist?: boolean): void;
        setDefaults(obj: Record<string, unknown>, persist?: boolean): void;
        set(key: string | Record<string, unknown>, item: unknown, persist?: boolean): void;
        get(key: string): any;
        execute(key: string, $el: El): any;
        has(key: string): boolean;
        hydrate($el?: ElRaw): void;
        init(rootPath: string, localStorageKey: string): void;
    }
    global {
        interface Window {
            reservoir: Reservoir;
            children: HTMLCollection;
        }
    }
    const reservoir: Reservoir;
    export default reservoir;
}

